Basic instruction format:
    op(6) cc(3) ra(4) am(3) | [Immediates...]

15 14 13 12 11 10  9 8 7  6 5 4 3  2 1 0
[ op            ]  [cc ]  [ra   ]  [am ]


Short instruction:
    op(6) cc(3) ra(4) 000

12 bit immediate:
    op(6) cc(3) ra(4) 001 | rb(4) imm(12)

28 bit immediate:
    op(6) cc(3) ra(4) 010 | rb(4) imm(12) imm(16)

32Bit immediate:
    op(6) cc(3) ra(4) 011 | imm(32)




Condition codes (cc):
    3'h0: none
    3'h1: .Z
    3'h2: .LT
    3'h3: .C
    3'h4: .V
    3'h5: .NZ
    3'h6: .GE
    3'h7: .NC


(op in hex)

 6'h00 nop

    0x0000
    0x0001 0000
    0x0002 0000 0000
    0x0003 0000 0000


6'h20 ld
    ld (rb+i), ra

    ld r1+10, r0

        op     cc  ra   am    rb   #imm12
        100000 000 0000 001 | 0001 0000 0000 1010
        0x8001_100A
    
    ld r1-10, r0

        op     cc  ra   am    rb   #imm12
        100000 000 0000 001 | 0001 1111 1111 0110
        0x8001_1FF6




    ld (rb+i), ra
    op     cc  ra   am    rb   #imm28
    100000 000 0000 010 | 0001 0000 0000 0000 0000 0000 0000 0010

    ld (i), ra
    op     cc  ra   am    #imm32
    100000 000 0000 011 | 0001 0010 0011 0100 0101 0110 0111 1000

6'h21 ldh

6'h22 ldb

6'h24 st
    st ra, (rb+i)
    op     cc  ra   am    rb   #imm12
    000010 000 0000 001 | 0001 0000 0000 0000
    
    st ra, (rb+i)
    op     cc  ra   am    rb   #imm28
    000010 000 0000 001 | 0001 0000 0000 0000 0000 0000 0000 0000

    st ra, (i)
    op     cc  ra   am    #imm32
    000010 000 0000 001 | 0000 0000 0000 0000 0000 0000 0000 0000

6'h25 sth

6'h26 stb

6'h07 mov
    
    special instruction format for mov:
        Supervisor can access user registers, not vice versa.
        Meaning of #imm12:
        [dc] [ra] [rb]
        0000 0001 0001
        
        if nibble ra/rb is 0: own register. 1: user register

    mov rb+11, ra  ; copy user register rb into user register ra, even as supervisor
    op     cc  ra   am    rb   #imm12
    000001 000 0000 001 | 0001 0000 0001 0001

    mov rb+10, ra ; if executed as supervisor: copy user register rb into supervisor register ra
                  ; if executed as user: copy user register rb into user register ra
    mov rb+1, ra  ; if executed as supervisor: copy supervisor register rb into user register ra
                  ; if executed as user: copy user register rb into user register ra

6'h10 sub
    sub rb+i, ra
    sub i, ra

6'h11 and
6'h12 add
6'h13 or
6'h14 xor
6'h15 lsr
6'h16 lsl
6'h17 asr
6'h18 asl


6'h20 cmp
6'h21 tst 


